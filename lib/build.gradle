/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer


plugins {
    id 'scala'
    id 'java'
    id 'java-library'
    //id 'maven-publish'

    id "com.github.johnrengelman.shadow" version "7.0.0"

    id 'war'
    id("io.ktor.plugin") version "2.3.0" //for fat jar
}

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//        vendor = JvmVendorSpec.ADOPTOPENJDK
//    }
//}

archivesBaseName = 'adaptivity-framework'
version = '1.0.0'
group = 'aose.icar'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    //jacamo repository
    maven {
        url "http://jacamo.sourceforge.net/maven2"
        allowInsecureProtocol = true
    }
    // MOISE with exceptions
    maven { url "https://moise-exceptions.sourceforge.io/maven2" }

//    flatDir {
//       dirs 'lib'
//    }

}

dependencies {
    // https://mvnrepository.com/artifact/org.scalaj/scalaj-http
    implementation 'org.scalaj:scalaj-http_2.13:2.4.2'

    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-http
    implementation 'com.typesafe.akka:akka-http_2.13:10.4.0-M1'
    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor
    implementation 'com.typesafe.akka:akka-actor_2.13:2.7.0-M3'
    // https://mvnrepository.com/artifact/com.typesafe.akka/akka-stream
    implementation 'com.typesafe.akka:akka-stream_2.13:2.7.0-M3'
    implementation 'net.liftweb:lift-json_2.13:3.5.0'


    // Use Scala 2.13 in our library project
    implementation 'org.scala-lang:scala-library:2.13.6'
    implementation 'org.scala-lang.modules:scala-parser-combinators_2.13:1.1.2'
    implementation 'org.scala-lang.modules:scala-xml_2.13:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.scalatest:scalatest_2.13:3.2.9'
    testImplementation 'org.scalatestplus:junit-4-13_2.13:3.2.2.0'

    // Use Jacamo and MOISE with Exceptions
    implementation group: 'org.jacamo', name: 'jacamo', version: '0.8'
    implementation group: 'org.jacamo', name: 'npl', version: '0.5-SNAPSHOT', changing: true, transitive: false
    implementation group: 'it.unito.di', name: 'moise-exceptions', version: '0.2', changing: true
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'

    // Use servlets
    implementation 'javax.servlet:javax.servlet-api:3.0.1'
    implementation group: 'org.json', name: 'json', version: '20211205'

    implementation group: 'io.github.hughsimpson', name: 'scalameter_2.13', version: '0.22'
    implementation group: 'org.mongodb', name: 'casbah_2.11', version: '3.1.1'

}

configurations {
    compile.exclude group: 'org.jacamo', module: 'moise'
}
configurations.all {
    // Check for updates every build
    //resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        scala {
            srcDir 'src/main/scala'
            srcDir 'src/main/jacamo/scalaenv'
            srcDir 'src/main/java'
            srcDir 'src/main/jacamo/env'
            srcDir 'src/main/jacamo/agt'
            srcDir 'src/main/jacamo/org'
        }
//        resources {
//            srcDir 'src/main/resources'
//            srcDir 'src/main/webapp'
//        }
    }
    test {
        java {
            srcDirs = []
        }
        scala {
            srcDirs 'src/test/scala'
        }
    }

}


task uberJarJacamo(type: Jar, dependsOn: 'classes') {
    group 'JaCaMo'
    description 'creates a single runnable jar file with all dependencies'

    manifest {
        attributes 'Main-Class': 'jacamo.infra.JaCaMoLauncher'
    }
    archiveBaseName = 'jacamo-MUSA' // the name must start with jacamo so that jacamo...jar is found in the classpath
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from(project.projectDir.absolutePath) {
        include '**/*.asl'
        include '**/*.xml'
        include '**/*.jcm'
        include '*.properties'
    }
    from(project.buildDir.absolutePath + '/jcm') {
        include '**/*'
    }
    with jar

    doFirst {
        copy {
            from 'MUSA.jcm'
            rename 'MUSA.jcm', 'default.jcm'
            into project.buildDir.absolutePath + '/jcm'
        }
    }
}

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}

task wrapper(type: Wrapper) {
    gradleVersion = '7.2'
}

task runNETTUNIT(type: JavaExec, dependsOn: 'classes') {
    description 'runs the NETTUNIT application'
    group 'execution'
    mainClass = 'org.icar.nettunit_solver.NETTUNITServer'
    classpath sourceSets.main.runtimeClasspath
}


task launchAgents(type: JavaExec, dependsOn: 'classes') {
    description 'runs the application'
    group 'JaCaMo'
    doFirst {
        mkdir 'log'
    }
    mainClass = 'jacamo.infra.JaCaMoLauncher'
    args 'src/main/jacamo/MUSA.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task runGoalExtractor(type: JavaExec, dependsOn: 'classes') {
    description 'goal_extractor'
    group 'execution'
    mainClass = 'org.icar.bpmn2goal.goal_extractor'
    //args 'MUSA.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task runPMRExample(type: JavaExec, dependsOn: 'classes') {
    description 'example of pmr'
    group 'execution'
    mainClass = 'org.icar.pmr_solver.Test_Solver_IDSlike'
    classpath sourceSets.main.runtimeClasspath
}

task runAAL4E(type: JavaExec, dependsOn: 'classes') {
    description 'example of pmr'
    group 'execution'
    mainClass = 'org.icar.pmr_solver.Test_Solver_AAL4E'
    classpath sourceSets.main.runtimeClasspath
}

task runPerfTest(type: JavaExec, dependsOn: 'classes') {
    description 'benchmark of WTS2Sol'
    group 'execution'
    mainClass = 'org.icar.pmr_solver.WTS2Solution__Benchmark'
    classpath sourceSets.main.runtimeClasspath
}

task testSup(type: JavaExec, dependsOn: 'classes') {
    description 'test_supervisor'
    group 'execution'
    mainClass = 'org.icar.sublevel.test_RawSupervisor'
    classpath sourceSets.main.runtimeClasspath
}

shadowJar {
    append 'reference.conf'
    append 'version.conf'
    archiveName = 'NETTUNIT_MUSA_Server.jar'
    with jar
}

application {
    mainClass.set("org.icar.nettunit_solver.NETTUNITServer")
}